DROP DATABASE HotelManagement
CREATE DATABASE HotelManagement;

use HotelManagement;

CREATE TABLE FoodCategory(
	CategoryId int PRIMARY KEY,
	CategoryName nvarchar(20) NOT NULL
)

CREATE TABLE Items (
	ItemId int PRIMARY KEY NOT NULL, 
	ItemName nvarchar(100) ,  
	Price int ,
	TotalQuantity int ,
	ItemActive BIT,
	FoodCategoryId int DEFAULT 1 FOREIGN KEY REFERENCES 
	[FoodCategory](CategoryId) ON UPDATE CASCADE ON DELETE SET DEFAULT
);

CREATE TABLE Role(
	RoleId int primary key,
	RoleName nvarchar(50) not null
)

CREATE TABLE Users(
	UserId int primary key identity(1,1),
	Username nvarchar(50) not null,
	Password nvarchar(50) not null,
	Phone nvarchar(15) ,
	Roleid int DEFAULT 3 FOREIGN KEY REFERENCES [Role](RoleId) ON DELETE SET DEFAULT
)

CREATE TABLE Orders(
	Id int PRIMARY KEY NOT NULL,
	TableId int NOT NULL,
	WaiterId int DEFAULT 1 FOREIGN KEY REFERENCES Users(UserId) ON UPDATE CASCADE ON DELETE SET DEFAULT
)

CREATE TABLE Order_Items_Link (
   ItemId INTEGER NOT NULL,
   OrderId INTEGER NOT NULL,
   Quantity INTEGER NOT NULL,
   PRIMARY KEY (ItemId, OrderId),
   FOREIGN KEY(ItemId) REFERENCES Items(ItemId) ON UPDATE CASCADE ON DELETE CASCADE,
   FOREIGN KEY(OrderId) REFERENCES Orders(Id) ON UPDATE CASCADE 
)

CREATE TABLE CusTable(
	TableId int primary key not null,
	OrderId int DEFAULT 1 FOREIGN KEY REFERENCES [Orders](Id) ON UPDATE CASCADE ON DELETE SET NULL,
)

-- /----------/----------/----------/----------/----------

ALTER TABLE Orders ADD CONSTRAINT FK_CusTable 
FOREIGN KEY (TableId) REFERENCES [CusTable](TableId) 

CREATE PROCEDURE CreateNewOrder   
	@TableNo int,
	@WaiterId int
AS   
	declare @i int;
	set @i = (select count(*) from Orders) + 1;
	Insert into Orders(Id , TableId , WaiterId) values(@i,@TableNo , @WaiterId);
	update cusTable  set OrderId = @i where cusTable.TableId = @TableNo;
	select count(*) from Orders;
GO

-- //////////////---------///////////
		
CREATE PROCEDURE GetAllOrderedItemsForTable   
	@TableNo int
AS   
	select i.ItemName , i.Price , x.Quantity 
	from Order_Items_Link x join Items i 
	on x.ItemId = i.ItemId 
	where x.OrderId = (select c.OrderId from CusTable c where c.TableId = @TableNo);
GO

-- //////////////---------///////////

CREATE PROCEDURE GetItemsByOrderId   
	@OrderId int
AS   
	select i.ItemName , i.Price , x.Quantity 
	from Order_Items_Link x join Items i 
	on x.ItemId = i.ItemId 
	where x.OrderId = @OrderId;
GO

-- //////////////---------///////////

CREATE PROCEDURE AddItemstoOrder
(
	@ItemId int ,
	@OrderId int ,
	@Quantity int
)
AS   
	IF @ItemId NOT IN (SELECT i.ItemId from Order_Items_Link x
			join Items i on x.ItemId = i.ItemId where x.OrderId = @OrderId)
		BEGIN
			INSERT INTO Order_Items_Link VALUES(@ItemId , @OrderId, @Quantity)
		END
	ELSE
		BEGIN
			UPDATE Order_Items_Link SET Quantity = @Quantity 
			WHERE OrderId = @OrderId AND  ItemId= @ItemId
		END
GO

-- //////////////---------///////////

CREATE PROCEDURE DeleteItem(@ItemId INT)
AS
	UPDATE Items SET ItemActive = 0 WHERE ItemId = @ItemId;
	SELECT * FROM Items WHERE ItemActive = 1;
GO

-- //////////////---------///////////


CREATE PROCEDURE AddItemToMenu
(
	@ItemName nvarchar(25),
	@Price int,
	@CategoryId int
)
AS   
	DECLARE @ItemId int , @TotalQuantity int = 0;
	-- Item name should be PascalCase (Frontend)
	IF @ItemName NOT IN (SELECT i.ItemName from Items i)
		BEGIN
			SET @ItemId = (SELECT COUNT(*) FROM Items) + 1
			INSERT INTO Items VALUES(@ItemId , @ItemName, @Price, @TotalQuantity, 1 , @CategoryId)
		END
	ELSE
		BEGIN
			UPDATE Items SET  Price = @Price , TotalQuantity = @TotalQuantity  , ItemActive = 1 ,  FoodCategoryId = @CategoryId
			WHERE ItemName = @ItemName
		END
GO

-- //////////////---------///////////

CREATE PROCEDURE DeleteUser
(
	@username nvarchar(25)
)
AS 
IF @username IN (SELECT TOP 1 u.Username FROM Users u WHERE  u.Username = @username)
	BEGIN
		DELETE FROM Users WHERE Username = @username;
		SELECT 1;
	END
else
	BEGIN SELECT 0; END
GO
-- //////////////---------///////////

CREATE PROCEDURE OrdersPlacedByWaiter
(
	@WaiterId int
)
AS 
-- Waiter Side Page (All Order Placed By Waiter)
	SELECT o.OrderId, i.ItemName , o.Quantity , i.Price 
	from Order_Items_Link o JOIN Items i 
	on o.ItemId = i.ItemId where o.OrderId IN (SELECT x.Id from Orders x where x.WaiterId = @WaiterId)
	order by OrderId;
GO

-- //////////////---------///////////

CREATE PROCEDURE HotalTotalRevenue
AS 
-- Admin Side Total billing Revenue
	SELECT SUM(i.Price * o.Quantity) as Revenue
	from Order_Items_Link o JOIN Items i 
	on o.ItemId = i.ItemId where o.OrderId IN (SELECT x.Id from Orders x)
GO

-- //////////////---------///////////

Create procedure Starter
AS
BEGIN 
	Insert into Role values(1 , 'Admin'),(2 , 'Waiter'),(3 , 'User');
	Insert into Users 
		values('vino' , 'vino' , '987644654', 1),
			  ('Ranjith' , 'Randy' , '9876446545', 3),
			  ('Keerthi' , 'Keerthi' , '9876446546', 3),
			  ('Logesh' , 'Logesh' , '9876446547', 2),
			  ('LogeshS' , 'LogeshS' , '9876446548', 2),
			  ('admin' , 'admin' , '9876543210' , 1);

	INSERT INTO FoodCategory values (1,'Veg') , (2,'Non-Veg') , (3,'Dessert') , (4,'Soup'),(5,'Other');
	Insert into Items (ItemId ,ItemName ,Price ,TotalQuantity ,ItemActive ,FoodCategoryId)values
		(1 , 'Dosa' , 70 , 20 , 1 , 1) , 
		(2 , 'Idly' , 40 , 18 , 1 , 1),
		(3 , 'Maggi' , 90 , 30 , 1 , 1),
		(4 , 'Briyani' , 250 , 50 , 1 , 2),
		(5 , 'Grill Chicken' , 200 , 20 , 1 , 2) , 
		(6 , 'Chilli Chicken' , 150 , 18 , 1 , 2),
		(7 , 'Panner Shawarama' , 85 , 30 , 1 , 1),
		(8 , 'Corn Soup' , 100, 50 , 1 , 4),
		(9 , 'Veg Soup' , 80 , 20 , 1 , 4) , 
		(10 , 'Chocolate IceCream' , 50 , 18 , 1 , 3),
		(11 , 'Black Current IceCream' , 45 , 30 , 1 , 3),
		(12 , 'Brain Fry' , 180 , 50 , 1 , 2);


	Insert into cusTable values(1,NULL) , (2,NULL) , (3,NULL),(4,NULL)
	Insert into Orders (Id , TableId , WaiterId)values(0,4,4) , (1,2,5) ,(2,1,4) , (4,4,NULL);
	Insert into Order_Items_Link (ItemId , OrderId ,Quantity) 
		values(4,1,2),(3,1,2),(1,1,6),(1,2,6);

END
-- /----------/----------/----------/----------/----------
EXEC Starter

EXEC CreateNewOrder 4;
EXEC GetAllOrderedItemsForTable 3
EXEC GetItemsByOrderId 6
EXEC AddItemstoOrder 1 , 17 , 18
EXEC AddItemstoOrder 1, 5 ,5
EXEC AddItemstoOrder 2, 5 ,8
EXEC GetAllOrderedItemsForTable 1
EXEC DeleteItem 2;
EXEC dbo.AddItemToMenu Dosa , 100
EXEC OrdersPlacedByWaiter 5
EXEC HotalTotalRevenue

-- /----------/----------/----------/----------/----------